
Lab06.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000248  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  000002bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008d8  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d6  00000000  00000000  00000c34  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003e9  00000000  00000000  0000140a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  000017f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043d  00000000  00000000  0000185c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001a9  00000000  00000000  00001c99  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001e42  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	f8 c0       	rjmp	.+496    	; 0x1f6 <__vector_1>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	c1 c0       	rjmp	.+386    	; 0x1c4 <__vector_16>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a5 30       	cpi	r26, 0x05	; 5
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	02 d0       	rcall	.+4      	; 0xae <main>
  aa:	cc c0       	rjmp	.+408    	; 0x244 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <main>:
int main(void)
{
	
unsigned char Pattern = 0; // Controls the value of the LEDs

DDRE = 0xFF;  // Configure all PORTE pins as outputs
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	82 b9       	out	0x02, r24	; 2
PORTE = 0xFF; // Turn off the active-low LEDs by setting them all to high
  b2:	83 b9       	out	0x03, r24	; 3

// set initial program values
Tick = 0;
  b4:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <Tick+0x1>
  b8:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <Tick>
Direction = GoingHighSide; //Makes the BackAndForth start low to high
  bc:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <Direction>
DifPattern = 0;
  c0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>

// Must cause interrupt to trigger every 1ms by causing overflow in TIMER0
TCNT0  = -115;            // remember, counts up until overflow
  c4:	8d e8       	ldi	r24, 0x8D	; 141
  c6:	82 bf       	out	0x32, r24	; 50
TCCR0 = (1<<CS02);             // Default mode for this board
  c8:	84 e0       	ldi	r24, 0x04	; 4
  ca:	83 bf       	out	0x33, r24	; 51
TIMSK = (1<<TOIE0);            // Sets TOIE0 to 1 which enables timer0 overflow interrupt
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	87 bf       	out	0x37, r24	; 55

DDRB &= ~(1<<DDRB4);           // clear DDRB4 to make PB4 (joystick center button) an input
  d0:	bc 98       	cbi	0x17, 4	; 23
PORTB |= (1<<PINB4);           // enable PORTB.4 pull-up resistor
  d2:	c4 9a       	sbi	0x18, 4	; 24
DDRD &= ~(1<<DDRD0);           // clear DDRD0 to make PD0 (external interrupt INT0) an input
  d4:	88 98       	cbi	0x11, 0	; 17

EICRA = (1<<ISC00)|(1<<ISC01); // set interrupt to activate on RISING edge (i.e. on button release)
  d6:	83 e0       	ldi	r24, 0x03	; 3
  d8:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
EIMSK |= (1<<INT0);            // Enable external interrupt 0
  dc:	89 b7       	in	r24, 0x39	; 57
  de:	81 60       	ori	r24, 0x01	; 1
  e0:	89 bf       	out	0x39, r24	; 57

sei(); // Enable interrupts 
  e2:	78 94       	sei
static bool DifPattern; // Tells main() that the pattern has changed

int main(void)
{
	
unsigned char Pattern = 0; // Controls the value of the LEDs
  e4:	30 e0       	ldi	r19, 0x00	; 0
if(DifPattern == 1) { //Checks if pattern has changed
DifPattern = 0; //Resets the Pattern tracker
Pattern = 0x80; //Gives first value for Pattern
}

PORTE = ~(Pattern); // Turn on Low signal LEDs
  e6:	5f e7       	ldi	r21, 0x7F	; 127
if(DifPattern == 1 ) { //Checks if pattern has changed
DifPattern = 0; //Resets the Pattern tracker
Pattern = 0x01;  //Gives first value for Pattern
}

PORTE = ~(Pattern); // Flips the bits in Pattern because PORTE is active low
  e8:	4e ef       	ldi	r20, 0xFE	; 254
}

PORTE = ~(Pattern); // Turn on Low signal LEDs
if(Direction == GoingHighSide) {
if(Pattern == 0x80) {
Direction = GoingLowSide; //Switch direction when at the 8th LED
  ea:	61 e0       	ldi	r22, 0x01	; 1
// "Game Loop"
while(1) { //Results in infinite while loop
if(Tick >= 50) { // 50 refers to 50ms delay
Tick = 0; // Reset tick count

switch(mode) { //Will execute current mode until it is changed in ISR(INT0_vect)
  ec:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <mode>

sei(); // Enable interrupts 

// "Game Loop"
while(1) { //Results in infinite while loop
if(Tick >= 50) { // 50 refers to 50ms delay
  f0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <Tick>
  f4:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <Tick+0x1>
  f8:	c2 97       	sbiw	r24, 0x32	; 50
  fa:	d0 f3       	brcs	.-12     	; 0xf0 <main+0x42>
Tick = 0; // Reset tick count
  fc:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <Tick+0x1>
 100:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <Tick>

switch(mode) { //Will execute current mode until it is changed in ISR(INT0_vect)
 104:	21 30       	cpi	r18, 0x01	; 1
 106:	b9 f0       	breq	.+46     	; 0x136 <main+0x88>
 108:	30 f0       	brcs	.+12     	; 0x116 <main+0x68>
 10a:	22 30       	cpi	r18, 0x02	; 2
 10c:	21 f1       	breq	.+72     	; 0x156 <main+0xa8>
 10e:	23 30       	cpi	r18, 0x03	; 3
 110:	09 f4       	brne	.+2      	; 0x114 <main+0x66>
 112:	47 c0       	rjmp	.+142    	; 0x1a2 <main+0xf4>
 114:	ed cf       	rjmp	.-38     	; 0xf0 <main+0x42>
	
case LowToHigh: //Mode == 0 so LowToHigh

//Initialize Pattern for this mode
if(DifPattern == 1 ) { //Checks if pattern has changed
 116:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 11a:	88 23       	and	r24, r24
 11c:	29 f0       	breq	.+10     	; 0x128 <main+0x7a>
DifPattern = 0; //Resets the Pattern tracker
 11e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
Pattern = 0x01;  //Gives first value for Pattern
}

PORTE = ~(Pattern); // Flips the bits in Pattern because PORTE is active low
 122:	43 b9       	out	0x03, r20	; 3
Pattern <<= 0x01; //Shifts the on LED up
 124:	32 e0       	ldi	r19, 0x02	; 2
 126:	e2 cf       	rjmp	.-60     	; 0xec <main+0x3e>
if(DifPattern == 1 ) { //Checks if pattern has changed
DifPattern = 0; //Resets the Pattern tracker
Pattern = 0x01;  //Gives first value for Pattern
}

PORTE = ~(Pattern); // Flips the bits in Pattern because PORTE is active low
 128:	83 2f       	mov	r24, r19
 12a:	80 95       	com	r24
 12c:	83 b9       	out	0x03, r24	; 3
Pattern <<= 0x01; //Shifts the on LED up
 12e:	33 0f       	add	r19, r19
if(Pattern == 0x00){ //Resets the on LED when it passes the 8th LED
 130:	e9 f6       	brne	.-70     	; 0xec <main+0x3e>
Pattern = 0x01; //Sets Pattern back to 1 before looping back to while(1)
 132:	31 e0       	ldi	r19, 0x01	; 1
 134:	db cf       	rjmp	.-74     	; 0xec <main+0x3e>
break;

case HighToLow: //Mode == 1

//Initialize Pattern for this mode
if(DifPattern == 1) { //Checks if pattern has changed
 136:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 13a:	88 23       	and	r24, r24
 13c:	29 f0       	breq	.+10     	; 0x148 <main+0x9a>
DifPattern = 0; //Resets the Pattern tracker
 13e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
Pattern = 0x80; //Gives first value for Pattern
}

PORTE = ~(Pattern); // Turn on Low signal LEDs
 142:	53 b9       	out	0x03, r21	; 3
Pattern >>= 1; //Shifts the on LED down
 144:	30 e4       	ldi	r19, 0x40	; 64
 146:	d2 cf       	rjmp	.-92     	; 0xec <main+0x3e>
if(DifPattern == 1) { //Checks if pattern has changed
DifPattern = 0; //Resets the Pattern tracker
Pattern = 0x80; //Gives first value for Pattern
}

PORTE = ~(Pattern); // Turn on Low signal LEDs
 148:	83 2f       	mov	r24, r19
 14a:	80 95       	com	r24
 14c:	83 b9       	out	0x03, r24	; 3
Pattern >>= 1; //Shifts the on LED down
 14e:	36 95       	lsr	r19
if(Pattern == 0x00) //Resets the on LED when it passes the 8th LED
 150:	69 f6       	brne	.-102    	; 0xec <main+0x3e>
Pattern = 0x80; //Sets Pattern back to 1 before looping back to while(1)
 152:	30 e8       	ldi	r19, 0x80	; 128
 154:	cb cf       	rjmp	.-106    	; 0xec <main+0x3e>
break;

case BackAndForth: //Mode == 2

//Initialize Pattern for this mode
if(DifPattern == 1) { //Checks if pattern has changed
 156:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 15a:	88 23       	and	r24, r24
 15c:	51 f0       	breq	.+20     	; 0x172 <main+0xc4>
DifPattern = 0; //Resets the Pattern tracker
 15e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
Direction = GoingHighSide; //Makes the BackAndForth start low to high
 162:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <Direction>
Pattern = 0x01; //Sets Pattern to 1 
}

PORTE = ~(Pattern); // Turn on Low signal LEDs
 166:	43 b9       	out	0x03, r20	; 3
if(Direction == GoingHighSide) {
 168:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <Direction>
 16c:	88 23       	and	r24, r24
 16e:	71 f0       	breq	.+28     	; 0x18c <main+0xde>
 170:	12 c0       	rjmp	.+36     	; 0x196 <main+0xe8>
DifPattern = 0; //Resets the Pattern tracker
Direction = GoingHighSide; //Makes the BackAndForth start low to high
Pattern = 0x01; //Sets Pattern to 1 
}

PORTE = ~(Pattern); // Turn on Low signal LEDs
 172:	83 2f       	mov	r24, r19
 174:	80 95       	com	r24
 176:	83 b9       	out	0x03, r24	; 3
if(Direction == GoingHighSide) {
 178:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <Direction>
 17c:	81 11       	cpse	r24, r1
 17e:	09 c0       	rjmp	.+18     	; 0x192 <main+0xe4>
if(Pattern == 0x80) {
 180:	30 38       	cpi	r19, 0x80	; 128
 182:	29 f4       	brne	.+10     	; 0x18e <main+0xe0>
Direction = GoingLowSide; //Switch direction when at the 8th LED
 184:	60 93 03 01 	sts	0x0103, r22	; 0x800103 <Direction>
Pattern = 0x40; //Sets 7th LED to on then move on
 188:	30 e4       	ldi	r19, 0x40	; 64
 18a:	b0 cf       	rjmp	.-160    	; 0xec <main+0x3e>

//Initialize Pattern for this mode
if(DifPattern == 1) { //Checks if pattern has changed
DifPattern = 0; //Resets the Pattern tracker
Direction = GoingHighSide; //Makes the BackAndForth start low to high
Pattern = 0x01; //Sets Pattern to 1 
 18c:	31 e0       	ldi	r19, 0x01	; 1
if(Pattern == 0x80) {
Direction = GoingLowSide; //Switch direction when at the 8th LED
Pattern = 0x40; //Sets 7th LED to on then move on
}
else {
Pattern <<= 1; //Shifts the on LED up
 18e:	33 0f       	add	r19, r19
 190:	ad cf       	rjmp	.-166    	; 0xec <main+0x3e>
}
}
else {
if(Pattern == 0x01) {
 192:	31 30       	cpi	r19, 0x01	; 1
 194:	21 f4       	brne	.+8      	; 0x19e <main+0xf0>
Direction = GoingHighSide;
 196:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <Direction>
Pattern = 0x02;
 19a:	32 e0       	ldi	r19, 0x02	; 2
 19c:	a7 cf       	rjmp	.-178    	; 0xec <main+0x3e>
}
else {
Pattern >>= 1; //Shifts the on LED down
 19e:	36 95       	lsr	r19
 1a0:	a5 cf       	rjmp	.-182    	; 0xec <main+0x3e>
break;

case BassSpectrum: //Mode == 3

//Initialize Pattern for this mode
if(DifPattern == 1) { //Checks if pattern has changed
 1a2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1a6:	88 23       	and	r24, r24
 1a8:	29 f0       	breq	.+10     	; 0x1b4 <main+0x106>
DifPattern = 0; //Resets the Pattern tracker
 1aa:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
Pattern = 0x80; //Gives first value for Pattern
}

PORTE = ~(Pattern);
 1ae:	53 b9       	out	0x03, r21	; 3
Pattern >>= 1; //Shifts the on LED down
 1b0:	30 e4       	ldi	r19, 0x40	; 64
 1b2:	9c cf       	rjmp	.-200    	; 0xec <main+0x3e>
if(DifPattern == 1) { //Checks if pattern has changed
DifPattern = 0; //Resets the Pattern tracker
Pattern = 0x80; //Gives first value for Pattern
}

PORTE = ~(Pattern);
 1b4:	83 2f       	mov	r24, r19
 1b6:	80 95       	com	r24
 1b8:	83 b9       	out	0x03, r24	; 3
Pattern >>= 1; //Shifts the on LED down
 1ba:	36 95       	lsr	r19
if(Pattern == 0x00) { //Resets the on LED when it passes the 8th LED
 1bc:	09 f0       	breq	.+2      	; 0x1c0 <main+0x112>
 1be:	96 cf       	rjmp	.-212    	; 0xec <main+0x3e>
Pattern = 0xFF; //Sets Pattern back to 1 before looping back to while(1)
 1c0:	3f ef       	ldi	r19, 0xFF	; 255
 1c2:	94 cf       	rjmp	.-216    	; 0xec <main+0x3e>

000001c4 <__vector_16>:
} //Tick close
} // While(1) close
} //Main(void) close

ISR(TIMER0_OVF_vect) //Interrupt for the timer
{
 1c4:	1f 92       	push	r1
 1c6:	0f 92       	push	r0
 1c8:	0f b6       	in	r0, 0x3f	; 63
 1ca:	0f 92       	push	r0
 1cc:	11 24       	eor	r1, r1
 1ce:	8f 93       	push	r24
 1d0:	9f 93       	push	r25
Tick++; // Increment Tick
 1d2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <Tick>
 1d6:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <Tick+0x1>
 1da:	01 96       	adiw	r24, 0x01	; 1
 1dc:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <Tick+0x1>
 1e0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <Tick>
TCNT0 = -115; // reset timer0 counter
 1e4:	8d e8       	ldi	r24, 0x8D	; 141
 1e6:	82 bf       	out	0x32, r24	; 50
}
 1e8:	9f 91       	pop	r25
 1ea:	8f 91       	pop	r24
 1ec:	0f 90       	pop	r0
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	0f 90       	pop	r0
 1f2:	1f 90       	pop	r1
 1f4:	18 95       	reti

000001f6 <__vector_1>:

ISR(INT0_vect) // Interrupt is triggered on high edge of joystick clink PB4
{
 1f6:	1f 92       	push	r1
 1f8:	0f 92       	push	r0
 1fa:	0f b6       	in	r0, 0x3f	; 63
 1fc:	0f 92       	push	r0
 1fe:	11 24       	eor	r1, r1
 200:	8f 93       	push	r24
switch(mode) { // Interrupt controls the current mode.
 202:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <mode>
 206:	81 30       	cpi	r24, 0x01	; 1
 208:	51 f0       	breq	.+20     	; 0x21e <__vector_1+0x28>
 20a:	28 f0       	brcs	.+10     	; 0x216 <__vector_1+0x20>
 20c:	82 30       	cpi	r24, 0x02	; 2
 20e:	59 f0       	breq	.+22     	; 0x226 <__vector_1+0x30>
 210:	83 30       	cpi	r24, 0x03	; 3
 212:	69 f0       	breq	.+26     	; 0x22e <__vector_1+0x38>
 214:	0e c0       	rjmp	.+28     	; 0x232 <__vector_1+0x3c>
case LowToHigh:
mode = HighToLow; // Mode is now 1 for HighToLow
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <mode>
break;
 21c:	0a c0       	rjmp	.+20     	; 0x232 <__vector_1+0x3c>
case HighToLow:
mode = BackAndForth; // Mode is now 2 for BackAndForth
 21e:	82 e0       	ldi	r24, 0x02	; 2
 220:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <mode>
break;
 224:	06 c0       	rjmp	.+12     	; 0x232 <__vector_1+0x3c>
case BackAndForth:
mode = BassSpectrum; // Mode is now 3 for BassSpectrum
 226:	83 e0       	ldi	r24, 0x03	; 3
 228:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <mode>
break;
 22c:	02 c0       	rjmp	.+4      	; 0x232 <__vector_1+0x3c>
case BassSpectrum:
mode = LowToHigh; // Mode is now 0 for LowToHigh
 22e:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <mode>
}
DifPattern = 1; // Tells main() to move to next Pattern
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
 238:	8f 91       	pop	r24
 23a:	0f 90       	pop	r0
 23c:	0f be       	out	0x3f, r0	; 63
 23e:	0f 90       	pop	r0
 240:	1f 90       	pop	r1
 242:	18 95       	reti

00000244 <_exit>:
 244:	f8 94       	cli

00000246 <__stop_program>:
 246:	ff cf       	rjmp	.-2      	; 0x246 <__stop_program>
